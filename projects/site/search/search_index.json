{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Elastic ML Whitelist Guide","text":"<p>Welcome to the Elastic ML Whitelist Guide! This guide will walk you through creating and using a trained machine learning model to predict whether alerts in Elastic should be whitelisted or not.</p> <p></p>"},{"location":"#steps","title":"Steps","text":""},{"location":"#1-train-the-model-locally","title":"1. Train the Model Locally","text":"<p>Train a machine learning model using historical Elastic data. Preprocess data as needed before training the model. Save the trained model to a file (e.g., using <code>pickle</code>).</p>"},{"location":"#2-import-the-model-into-elasticsearch","title":"2. Import the Model into Elasticsearch","text":"<pre><code>import eland as ed\nfrom elasticsearch import Elasticsearch\nimport pickle\n\nes_client = Elasticsearch(\"http://localhost:9200\") \n</code></pre> <p>Replace 'path/to/trained_model.pkl' with the path to saved model file</p> <pre><code>with open(\"path/to/trained_model.pkl\", \"rb\") as model_file:\n    model = pickle.load(model_file)\n\nmodel_id = \"imported-model-id\"\ned.ml.import_model(es_client, model, model_id)\n</code></pre>"},{"location":"#3-create-an-elasticsearch-ingest-pipeline-with-the-inference-processor","title":"3. Create an Elasticsearch Ingest Pipeline with the Inference Processor","text":"<pre><code>pipeline_id = \"whitelist-prediction-pipeline\"\n\npipeline_body = {\n    \"description\": \"Pipeline to predict if an alert should be whitelisted\",\n    \"processors\": [ \n        {\n            \"inference\": {\n                \"model_id\": model_id,\n                \"inference_config\": {\"classification\": {}},\n                \"field_map\": {}, # Dependant Variables\n                \"target_field\": \"whitelist_prediction\", #Independant Variable\n            }\n        }\n    ],\n}\n\nes_client.ingest.put_pipeline(id=pipeline_id, body=pipeline_body)\n</code></pre>"},{"location":"#4-create-a-new-pipeline-to-route-whitelisted-alerts-to-a-new-index","title":"4. Create a New Pipeline to Route Whitelisted Alerts to a New Index","text":"<pre><code>whitelisted_alerts_index = \"whitelisted-alerts\"\nnew_pipeline_id = \"route-to-whitelisted-index\"\n\nnew_pipeline_body = {\n    \"description\": \"Pipeline to route whitelisted alerts to a new index\",\n    \"processors\": [\n        {\n            \"conditional\": {\n                \"if\": \"ctx.whitelist_prediction.class_name == '1'\",\n                \"processors\": [\n                    {\n                        \"index\": {\n                            \"index\": whitelisted_alerts_index,\n                        }\n                    }\n                ],\n            }\n        },\n    ],\n}\n\nes_client.ingest.put_pipeline(id=new_pipeline_id, body=new_pipeline_body)\n</code></pre>"},{"location":"#5-configure-filebeat-or-logstash-to-use-the-new-pipeline","title":"5. Configure Filebeat or Logstash to Use the New Pipeline","text":""},{"location":"#filebeatyml","title":"filebeat.yml","text":"<pre><code>filebeat.inputs:\n- type: log\n  paths:\n    - /path/to/alert/logs/*.log\n  fields:\n    pipeline: \"route-to-whitelisted-index\"\n\noutput.elasticsearch:\n  hosts: [\"http://localhost:9200\"]\n  pipeline: \"%{[fields.pipeline]}\"\n</code></pre>"},{"location":"#logstashconf","title":"logstash.conf","text":"<pre><code>output {\n  elasticsearch {\n    hosts =&gt; [\"http://localhost:9200\"]\n    index =&gt; \"siem-index\"\n    pipeline =&gt; \"route-to-whitelisted-index\"\n  }\n}\n</code></pre>"},{"location":"#reference-links","title":"Reference Links","text":"<p>https://eland.readthedocs.io/en/v8.3.0/reference/api/eland.ml.MLModel.import_model.html</p> <p>https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html</p> <p>https://www.elastic.co/guide/en/elasticsearch/client/eland/current/overview.html</p>"},{"location":"#index","title":"Index","text":"<p>An Inference Processor is part of the Elasticsearch ingest pipeline that allows you to use pre-trained Ml Models to enrich data during indexing. So it'll apply the ML Model to incoming documents and add the model's prediction results as new fields in the documents before they are stored in an Elastic index.</p>"}]}